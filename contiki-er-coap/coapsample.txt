// Do not remove the include below
#include "contiki.h"
#include <stdlib.h>
#include <string.h>
#include "rest-engine.h"
#include <stdlib.h>
#include <string.h>
#include "contiki.h"
#include "contiki-net.h"
#include "rest-engine.h"
#include "dev/temperature-sensor.h"
#include "dev/light-sensor.h"
static void temp_get_handler(void *request, void *response, uint8_t *buffer, uint16_t preferred_size, int32_t *offset);
static void light_get_handler(void *request, void *response, uint8_t *buffer, uint16_t preferred_size, int32_t *offset);
static void voltage_get_handler(void *request, void *response, uint8_t *buffer, uint16_t preferred_size, int32_t *offset);
RESOURCE(res_light,
		"title=\"light, POST/PUT/GET\";rt=\"Text\"",
		light_get_handler,
		light_get_handler,
		light_get_handler,
		NULL);

static void
light_get_handler(void *request, void *response, uint8_t *buffer, uint16_t preferred_size, int32_t *offset)
{
	REST.set_header_content_type(response, REST.type.TEXT_PLAIN);
	snprintf((char *)buffer, REST_MAX_CHUNK_SIZE, "%d\n",sensor_light_get());
	REST.set_response_payload(response, (uint8_t *)buffer, strlen((char *)buffer));

}
RESOURCE(res_voltage,
		"title=\"voltage, POST/PUT/GET\";rt=\"Text\"",
		voltage_get_handler,
		voltage_get_handler,
		voltage_get_handler,
		NULL);
static void
voltage_get_handler(void *request, void *response, uint8_t *buffer, uint16_t preferred_size, int32_t *offset)
{
	REST.set_header_content_type(response, REST.type.TEXT_PLAIN);
	snprintf((char *)buffer, REST_MAX_CHUNK_SIZE, "%d mv\n",(int)voltage_get()*1000);
	REST.set_response_payload(response, (uint8_t *)buffer, strlen((char *)buffer));

}
RESOURCE(res_temperature,
		"title=\"temperature ?unit=c|f, POST/PUT/GET\";rt=\"Text\"",
		temp_get_handler,
		temp_get_handler,
		temp_get_handler,
		NULL);

static void
temp_get_handler(void *request, void *response, uint8_t *buffer, uint16_t preferred_size, int32_t *offset)
{
	size_t len = 0;
	const char *unit = NULL;
	temp_unit_t tunit=0;
	int success = 1;
	if((len = REST.get_query_variable(request, "unit", &unit))) {
		if(strncmp(unit, "c", len) == 0) {
			tunit = TEMP_UNIT_CELCIUS;
		} else if(strncmp(unit, "f", len) == 0) {
			tunit = TEMP_UNIT_FAHRENHEIT;
		} else {
			success = 0;
		}
	}
	if(!success) {
		REST.set_response_status(response, REST.status.BAD_REQUEST);
	}
	else
	{
		REST.set_header_content_type(response, REST.type.TEXT_PLAIN);
		snprintf((char *)buffer, REST_MAX_CHUNK_SIZE, "%d.%d %s\n",(int)temperature_sensor.value(tunit),(temperature_sensor.value(tunit)*100 ) %100,tunit?"fc":"degc");
		REST.set_response_payload(response, (uint8_t *)buffer, strlen((char *)buffer));
	}
}

extern resource_t res_temperature;
PROCESS(er_example_server, "Coap Example Server");
AUTOSTART_PROCESSES(&er_example_server);
PROCESS_THREAD(er_example_server, ev, data)
{
	SENSORS_ACTIVATE(temperature_sensor); //由于温度传感器一直可用,所以这不是必须的
	PROCESS_BEGIN();
	rest_init_engine();
	rest_activate_resource(&res_temperature, "sensors/temperature");
	rest_activate_resource(&res_light, "sensors/light");
	rest_activate_resource(&res_voltage, "sensors/voltage");
	while(1) {
		PROCESS_YIELD();
	}
	PROCESS_END();
}
