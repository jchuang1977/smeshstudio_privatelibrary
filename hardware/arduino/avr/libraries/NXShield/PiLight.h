
// PiLight.h
//
// This is a class for writing to PiLight, made by Openelectrons.
// See http://www.mindsensors.com/index.php?module=pagemaster&PAGE_user_op=view_page&PAGE_id=169

// Initial version: 2014-03-17 by Michael Giles
// Large parts of the code is ported from the Raspberry Pi library for the device,
// written by Nitin Patil.

/*
  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/


#ifndef PILIGHT_H
#define PILIGHT_H

#include "NXShieldI2C.h"

// Color Registers.
#define PILIGHT_RED   0x42
#define PILIGHT_GREEN    0x43
#define PILIGHT_BLUE     0x44

/**
 * \struct color
 Color related data
 */
struct color
{
 	byte r;	 /*!<Color value of red generated by the PiLight */
	byte g;	 /*!<Color value of green generated by the PiLight */
	byte b;	 /*!<Color value of blue generated by the PiLight */
};

/**
  @brief This class interfaces with PiLight sensor attached to NXShield 
  */
class PiLight : public NXShieldI2C
{
public:
  /** constructor for the PiLight; may supply an optional custom i2c address */
  PiLight(uint8_t i2c_address = 0x30);
	
  /** 
   * Get the read, green, and blue color values from the PiLight
   * @param color structure
   * @return parameter is returned with values */
	void      readPiLight(color & currcolor);
	
  /** 
   * Set a time out time in seconds 
   * @param timeoutValue will turn off PiLight after a specified time if no communication */
	void      setTimeout1(uint8_t timeoutValue);
	
  /** 
   * Set the color of the PiLight 
   * @param red set the value of the red color
   * @param green set the value of the green color
   * @param blue set the value of the blue color
   * @return parameter is returned with values */
	void	  createPiLight(uint8_t red, uint8_t green, uint8_t blue);
};
#endif
